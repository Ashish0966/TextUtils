{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","home","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","role","word","lower","charAt","slice","capitalise","msg","defaultProps","about","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ae7d5701.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n//import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid \">\r\n    <a className=\"navbar-brand \" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">{props.home}</a>\r\n        </li>\r\n        {/*<li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.about}</Link>\r\n    </li>*/}\r\n    \r\n      </ul>\r\n      {/*<form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n    <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form>*/}\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n</div>\r\n    )\r\n}\r\n\r\nNavbar.propTypes=\r\n{title: PropTypes.string.isRequired,   //if no default and not on ap.js then gives an error\r\n about: PropTypes.string}              \r\n\r\nNavbar.defaultProps=\r\n{\r\n    title:'Set title',\r\n    about:'About Me'\r\n}","import React, {useState} from 'react' //it is hook\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n       // console.log(\"Uppercase was clicked\");\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase\", \"Success\");\r\n    }\r\n\r\n    const handleloClick = ()=>{\r\n        // console.log(\"Uppercase was clicked\");\r\n         let newText=text.toLowerCase();\r\n\r\n         setText(newText);\r\n         props.showAlert(\"Converted to Lowercase\", \"Success\");\r\n     }\r\n\r\n    const handleOnChange = (event)=>{\r\n        //console.log(\"On change\" + text);\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleclear = ()=>{\r\n       let newText=' ';\r\n       setText(newText);\r\n       props.showAlert(\"Text is removed\", \"Success\");\r\n\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        let text=document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to the clipboard\", \"Success\");\r\n\r\n    }\r\n\r\n    const handleExtraSpaces = () =>\r\n    {\r\n        let newText=text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces cleared\", \"Success\");\r\n    }\r\n    \r\n    const [text,setText]=useState('Enter text here2');\r\n    //text=\"New State\" ; is wrong way to change the state\r\n    //setText(\"new text\"); \r\n    return (\r\n        <>\r\n        <div className=\"Container my-2\" style={{color: props.mode==='dark'?'white':'#042743'}} >\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Upper Case</button>\r\n            <button className=\"btn btn-primary\" onClick={handleloClick}>Convert to Lower Case</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleclear}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n        </div>\r\n\r\n        <div className=\"Container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}} >\r\n            <h1>Your Text Summary</h1>\r\n            <p>{text.split(\" \").length} words and {text.length} character</p>\r\n            <p>{0.008* text.split(\" \").length} Minutes read</p>\r\n            <p>Preview</p>\r\n            <p>{text.length>0?text:\"Enter something to preview here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalise = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalise(props.alert.type)}</strong>: {props.alert.msg}\r\n            \r\n        </div>\r\n\r\n    )\r\n}\r\n ","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n//import About from './components/About';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode]= useState('light');  //whether dark mode is enable or not\n  \n  const [alert, setAlert] = useState(null);\n\n  const showAlert= (message, type) =>\n  {\n\n    setAlert({\n      msg: message,\n      type: type,\n    })\n\n    setTimeout(()=>{\n      setAlert(null);\n    },2000);\n\n  }\n\n  const toggleMode = ()=>\n  {\n    if(mode === 'light')\n    {\n      setMode('dark');\n      document.body.style.backgroundColor='#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title=\"TextUtils - Dark Mode\";\n      //setInterval(()=>\n      //{\n      //  document.title=\"TextUtils is Amazing Mode\";\n      //}, 2000);\n      \n      //setInterval(()=>\n     // {\n      //  document.title=\"Install TextUtils Now\";\n     // }, 1500);\n      \n    }\n\n    else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title=\"TextUtils - Light Mode\";\n    }\n  } \n  return (\n    <>\n    <Router>\n\n    <Navbar title=\"TextUtils\" home=\"My Home\" about=\"About\"  mode={mode} toggleMode={toggleMode} />\n    <Alert alert={alert}/>\n\n    <div className=\"container my-3\">\n    {/*<Switch>\n        <Route exact path=\"/about\">\n        <About />\n        </Route>\n    <Route exact path=\"/\">*/}\n        <TextForm heading=\"Enter Your Text\" mode={mode} showAlert={showAlert}/>   \n        {/*</Route>\n    </Switch>*/}\n    </div>\n    </Router>\n\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}